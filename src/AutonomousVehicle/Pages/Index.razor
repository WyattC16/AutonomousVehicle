@page "/"

<PageTitle>Autonomous Vehicle</PageTitle>

<EditForm Model="SensorsSummary" OnSubmit="@(() => {})">
    <div class="form-check form-switch">
        <label for="displayAdmin">Display Admin Controls</label>
        <InputCheckbox id="displayAdmin" class="form-check-input" @bind-Value="DisplayAdminControls"/>
    </div>
</EditForm>

@if (DisplayAdminControls)
{
    <CascadingValue Value="this">
        <Admin OnSubmit=@ApplySensorsValuesUpdate/>
    </CascadingValue>
}

<MasterInterface SensorsSummary=@SensorsSummary OnSystemStatusBarClick=@(() => StateHasChanged()) OnHomeClick=@(() => StateHasChanged()) />

@code{
    private bool DisplayAdminControls { get; set; }

    public SensorsSummary SensorsSummary { get; } = new()
    {
        Destination = "Walmart, 900 Stillater Ave, Bangor",
        TravelTimeMinutes = 85,
        Temperature = 36,
        TemperatureType = TemperatureType.Fahrenheit,
        SystemMessages =
        {
            new SystemMessage
            {
                Message = "Next turn in 1 mile",
                MessageCriticality = SystemMessageCriticality.Information,
                Order = 1
            },
            new SystemMessage
            {
                Message = "Braking applied - side collision avoided",
                MessageCriticality = SystemMessageCriticality.Warning,
                Order = 2
            }
        },
        DisplaySeatbeltIcon = true,
        DisplayCheckEngine = true,
        DisplayHazardsIcon = true,
        DisplayAirbagIcon = true,
        GasTankAmountGallons = 10,
        GasTankTotalGallons = 20,
        RoadCondition = "Normal, Dry",
        SpeedLimit = 35,
        Odometer = 25346,
        NextFuelUp = 134,
        TirePressureCondition = SystemStatusCondition.Good,
        OilPressureCondition = SystemStatusCondition.Good,
        TemperatureCondition = SystemStatusCondition.Good,
        BatteryCondition = SystemStatusCondition.Good,
        PowerSteeringCondition = SystemStatusCondition.Good,
        EngineCondition = SystemStatusCondition.Good,
        SensorsCondition = SystemStatusCondition.Good,
        ProcessorCondition = SystemStatusCondition.Good
    };

    internal void ApplySensorsValuesUpdate()
    {
        //changing a value triggers the StateHasChanged method. Calling it explicitly after would render a second unneccessary time
        DisplayAdminControls = false;
    }
}