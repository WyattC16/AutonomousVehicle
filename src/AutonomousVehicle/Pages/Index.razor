@page "/"

@using Toolbelt.Blazor.SpeechSynthesis
@inject SpeechSynthesis SpeechSynthesis

@implements IDisposable

<PageTitle>Autonomous Vehicle</PageTitle>

<EditForm Model="SensorsSummary" OnSubmit="@(() => {})">
    <div class="form-check form-switch">
        <label for="displayAdmin">Display Admin Controls</label>
        <InputCheckbox id="displayAdmin" class="form-check-input" @bind-Value="DisplayAdminControls"/>
    </div>
</EditForm>

@if (DisplayAdminControls)
{
    <CascadingValue Value="this">
        <Admin OnSubmit=@ApplySensorsValuesUpdate/>
    </CascadingValue>
}

<MasterInterface SensorsSummary=@SensorsSummary OnSystemStatusBarClick=@(() => StateHasChanged()) OnHomeClick=@(() => StateHasChanged()) />

@code{
    private bool DisplayAdminControls { get; set; }

    public SensorsSummary SensorsSummary { get; } = new()
    {
        RandomizeValues = true
    };

    internal void ApplySensorsValuesUpdate()
    {
        //changing a value triggers the StateHasChanged method. Calling it explicitly after would render a second unneccessary time
        DisplayAdminControls = false;
    }

    private SensorsRandomizer? Randomizer { get; set; }

    private CancellationTokenSource RandomizerCancellationTokenSource { get; } = new CancellationTokenSource();


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Randomizer = new SensorsRandomizer(SensorsSummary, StateHasChanged, SpeechSynthesis);
            Task.Run(() => Randomizer.RandomizeAsync(RandomizerCancellationTokenSource.Token));
        }
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    public void Dispose(bool disposing)
    {
        if (disposing)
        {
            RandomizerCancellationTokenSource.Cancel();
            RandomizerCancellationTokenSource.Dispose();
        }
    }
}